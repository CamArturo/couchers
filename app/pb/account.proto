syntax = "proto3";

package org.couchers.api.account;

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "pb/annotations.proto";

service Account {
  // This is a secure service: a user needs to be authenticated and not jailed to call functions here, refer to auth.proto and jail.proto

  // account management APIs
  rpc GetAccountInfo(google.protobuf.Empty) returns (GetAccountInfoRes) {
    // Get information about the user's account
  }

  rpc ChangePassword(ChangePasswordReq) returns (google.protobuf.Empty) {
    // Change, set, or unset the user's password
    // we will send and an email to the user saying their password was changed
  }

  rpc ChangeEmail(ChangeEmailReq) returns (google.protobuf.Empty) {
    // Change the user's email address
    // we will send and email saying the email changed to the old email, and confirmation email to the new email
    // Raises INVALID_ARGUMENT if password is too small or too large or insecure or wrong or not supplied.
  }

  rpc GetContributorFormInfo(google.protobuf.Empty) returns (GetContributorFormInfoRes) {
    // Returns info related to filling out the contributor form
  }

  rpc MarkContributorFormFilled(MarkContributorFormFilledReq) returns (google.protobuf.Empty) {
    // Marks the contributor form as filled
  }

  rpc ChangePhone(ChangePhoneReq) returns (google.protobuf.Empty) {
    // Set/Change/Remove phone number
  }

  rpc SendVerificationSMS(SendVerificationSMSReq) returns (SendVerificationSMSRes) {
    // Send phone number verification sms. The code in the SMS should be send back in VerifyPhone()
  }

  rpc VerifyPhone(VerifyPhoneReq) returns (VerifyPhoneRes) {
    // Enter the code you got in the sms. Other accounts using the same phone number will
    // lose their verification status.
  }
}

message GetAccountInfoRes {
  enum LoginMethod {
    MAGIC_LINK = 0;
    PASSWORD = 1;
  }

  LoginMethod login_method = 1;
  bool has_password = 2;

  // user's current email address
  string email = 3;

  // User's current phone number, or empty string if no phone number has been entered.
  // in E.164 format (including country code without the + sign)
  string phone = 4;

  // The time the mobile phone verification needs to be renewed or it will lose the verified status.
  // If not verified yet, this will be an arbitrary date in the past.
  // An email reminder will be sent in due time to refresh the verification.
  google.protobuf.Timestamp phone_verification_expiry = 5;
}

message ChangePasswordReq {
  // a null value indicates that the password wasn't set before
  google.protobuf.StringValue old_password = 1 [(sensitive) = true];
  // a null value indicates that the password should be unset (removed)
  // the frontend should ask for the password twice and whatnot
  google.protobuf.StringValue new_password = 2 [(sensitive) = true];
}

message ChangeEmailReq {
  google.protobuf.StringValue password = 1 [(sensitive) = true];
  string new_email = 2;
}

message GetContributorFormInfoRes {
  bool filled_contributor_form = 1;

  string username = 2;
  string name = 3;
  string email = 4;
  uint32 age = 5;
  string gender = 6;
  string location = 7;
}

message MarkContributorFormFilledReq {
  bool filled_contributor_form = 1;
}

message ChangePhoneReq {
  // New phone number in E.164 format, or empty string to remove phone number.
  // The phone number will be visible to moderators in your area, verified or not.
  string phone = 1;

  // If you have a previously verified number, changing your number and losing
  // the verified status will fail if false is passed.
  bool remove_verification = 2;
}

message SendVerificationSMSReq {
}

message SendVerificationSMSRes {
  enum SendVerificationSMSStatus {
    SMS_RESULT_CODE_SENT = 0;
    SMS_RESULT_ALREADY_VERIFIED = 1;  // No code sent since the same number is already verified, and a renewal can't be done yet
    SMS_RESULT_RATELIMIT = 2;   // Hold your horses, contact admin to send more than one SMS in a short period
    SMS_RESULT_UNSUPPORTED_OPERATOR = 3;  // Sorry, we don't know how to send SMS to your number
    SMS_RESULT_OPERATOR_ERROR = 4;  // Unknown, see operator_error_message.
    SMS_RESULT_CONSENT_NEEDED = 5;  // Accept a later ToS version to allow couchers to use external services for sms delivery
    SMS_RESULT_NO_PHONE_NUMBER = 6;  // User hasn't inputed a phone number yet
  }
  SendVerificationSMSStatus status = 1;

  // Empty string in all cases except when status == SMS_RESULT_OPERATOR_ERROR
  // Might not be english.
  string operator_error_message = 2;
}

message VerifyPhoneReq {
  // Should be a numerical string with Luhn algorithm mod 10 checksum equals 0.
  // Frontends could do that pre-check.
  string token = 1 [(sensitive) = true];
}

message VerifyPhoneRes {
  enum VerifyPhoneStatus {
    VERIFY_PHONE_SUCCESS = 0;
    VERIFY_PHONE_TOO_MANY_ATTEMPTS = 1;  // No brute-forcing please.
    VERIFY_PHONE_NO_SMS_SENT = 2;   // Please do a succesfull call to SendVerificationSMS first.
    VERIFY_PHONE_WRONG_CODE = 3;    // Either Luhn checksum error or incorrect code, try again.
  }
  VerifyPhoneStatus status = 1;
}
