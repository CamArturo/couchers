syntax = "proto3";

package org.couchers.auth;

import "google/protobuf/empty.proto";

import "pb/annotations.proto";

import "pb/account.proto";
import "pb/api.proto";

service Auth {
  // This is an open service, no authentication is needed

  /*
  Authentication API

  This API facilitates authentication actions: signup and signin. Users need to use this before logging in, so you don't need to be authorized to use it.

  The signup flow (from point of view of backend) is as follows:
  * There are three parts to the signup: Basic, Account, and Feedback
  * Each part needs to be filled in, and the user's email needs to be confirmed before the user can continue to the app
  * The Basic part must be filled in first, after which the backend returns a flow_token
  * The frontend may do the signup incrementally by sending the other parts with the same flow_token
  * You can only fill in each part once

  The login flow is as follows:
  * The user enters an identifier field and submits the form
  * The backend finds the user based on either username/user id/email address
  * If that user _does not_ have a password, we email a one-click signin token and return SENT_LOGIN_EMAIL
  * If that user _does not_ have a password, they click that link and the app logs them in through a CompleteTokenLoginReq (login token is invalidated)
  * If that user _does_ have a password, the app asks for that password, and submits an Authenticate Call to log the user in

  Signup and login tokens expire after some time, and once used cannot be reused.

  There can be multiple signup requests simultaneously with the same email address. Email address uniqueness is checked once when creating the signup request, and again when creating the user.
  */

  rpc SignupFlow(SignupFlowReq) returns (SignupFlowRes) {
    // Signup flow
  }

  rpc UsernameValid(UsernameValidReq) returns (UsernameValidRes) {
    // Check whether the username is valid and available
  }

  rpc Login(LoginReq) returns (LoginRes) {
    // First step of login flow
  }

  rpc CompleteTokenLogin(CompleteTokenLoginReq) returns (AuthRes) {
    // Complete a login after receiving an email with a login token
  }

  rpc Authenticate(AuthReq) returns (AuthRes) {
    // Auth a user with username + password
  }

  rpc Deauthenticate(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // Invalidate a session, deauthing a user
  }

  rpc ResetPassword(ResetPasswordReq) returns (google.protobuf.Empty) {
    // Sends a forgot password email to the given user if the user exists, returns no output (so you can't go around guessing email addresses)
  }

  rpc CompletePasswordReset(CompletePasswordResetReq) returns (google.protobuf.Empty) {
    // Triggered when the user goes to the link sent in the forgot password email
  }

  rpc CompleteChangeEmail(CompleteChangeEmailReq) returns (google.protobuf.Empty) {
    // When a user opens a changed email confirmation, the frontend should call this function with the token
  }
}

message SignupFlowReq {
  // a token used to link the user's information across the signup flow
  // required if basic is empty, otherwise the backend generates a new signup
  string flow_token = 1 [(sensitive) = true];

  SignupBasic basic = 2;
  SignupAccount account = 3;
  SignupFeedback feedback = 4;

  string email_verification_token = 5 [(sensitive) = true];
}

message SignupFlowRes {
  // a token used to link the user's information across the signup flow
  string flow_token = 1 [(sensitive) = true];
  // signup is fully successful, can go to app now
  bool success = 2;
  // this is included iff success is true
  AuthRes auth_res = 3;
  // which parts are missing?
  bool need_basic = 4;
  bool need_account = 5;
  bool need_feedback = 6;
  // user needs to verify their email
  bool need_verify_email = 7;
}

message SignupBasic {
  string name = 1;
  string email = 2;
  // TODO: string invitation_code = 3;
  // TODO: UTM parameters, attribution
}

message SignupAccount {
  // Should be lowercase ascii, matching regex [a-z][0-9a-z_]*[a-z0-9]
  string username = 1;
  // optional
  string password = 2 [(sensitive) = true];

  string birthdate = 3; // in YYYY-MM-DD format
  string gender = 4;
  org.couchers.api.core.HostingStatus hosting_status = 5;

  string city = 6;
  double lat = 7;
  double lng = 8;
  double radius = 9; // meters

  bool accept_tos = 10;
}

message SignupFeedback {
  org.couchers.api.account.ContributorForm form = 1;
}

message UsernameValidReq {
  string username = 1;
}

message UsernameValidRes {
  bool valid = 1;
}

message LoginReq {
  string user = 1;
}

message LoginRes {
  enum LoginStep {
    NEED_PASSWORD = 0;
    SENT_LOGIN_EMAIL = 1;
  }

  LoginStep next_step = 1;
}

message CompleteTokenLoginReq {
  string login_token = 1 [(sensitive) = true];
}

message AuthReq {
  string user = 1;
  string password = 2 [(sensitive) = true];

  // whether to remember the browser or not
  // if false, the session will time out after 7 days of inactivity (no API calls)
  // if true, the session is valid from creation until expiry, with no need to be used in between
  bool remember_device = 3;
}

message AuthRes {
  // user_id of the user
  int64 user_id = 1;
  // whether the user has to complete some additional steps to continue to the
  // platform
  bool jailed = 2;
}

message ResetPasswordReq {
  string user = 1;
}

message CompletePasswordResetReq {
  string password_reset_token = 1 [(sensitive) = true];
}

message CompleteChangeEmailReq {
  string change_email_token = 1 [(sensitive) = true];
}
