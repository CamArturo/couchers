syntax = "proto3";

package org.couchers.api.communities;

import "google/protobuf/timestamp.proto";

service Communities {
  // This is a secure service: a user needs to be authenticated and not jailed to call functions here, refer to auth.proto and jail.proto

  // Discussion threads are organized as a tree with maximum three levels depth:
  // thread1
  // +- comment1
  // |  +- reply1
  // |  +- reply2
  // +- comment2
  //    +- reply3
  //    +- reply4
  // thread2
  // +- comment3
  // |  +- reply5
  // |  +- reply6
  // +- comment4
  //    +- reply7
  //    +- reply8

  // The same API is used regardless of level. All posts are using the same id namespace.

  // Get non-deleted posts belonging to a thread, sorted in reverse time order.
  // Pagination is supported by the posted_before_thread_id and number fields.
  rpc GetThread(GetThreadReq) returns (GetThreadRes);

  // Post a new comment on a thread. The post can not be changed or deleted after posting.
  // Throws INVALID_ARGUMENT if thread_id corresponds to a nesting level 3 reply, since no futher nesting is allowed.
  rpc PostComment(PostCommentReq) returns (PostCommentRes);
}

message GetThreadReq {
  int64 thread_id = 1;
  // Only get comments posted before the comment having this thread_id. Pass 0 to get all.
  int64 posted_before_thread_id = 2;
  // Maximum number of comments to return.
  uint32 number = 3;
}

message GetThreadRes {
  // sorted in inverse time order, latest comment first.
  repeated Comment comments = 1;

  // number of comments posted earlier than the ones returned in `comments`
  // zero if all comments has been returned to the client.
  uint32 num_earlier_comments = 2;
}

message Comment {
  int64 thread_id = 1;
  string content = 2;  // markdown without images
  int64 author_user_id = 3;
  google.protobuf.Timestamp created_time = 4;

  // total number of replies to this comment
  uint32 num_replies = 5;
}

message PostCommentReq {
  int64 thread_id = 1;
  string content = 2;  // markdown without images
}

message PostCommentRes {
  // The id of the just posted comment
  int64 thread_id = 1;
}
