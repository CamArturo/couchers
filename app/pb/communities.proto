syntax = "proto3";

package org.couchers.api.communities;

import "google/protobuf/timestamp.proto";

service Communities {
  // This is a secure service: a user needs to be authenticated and not jailed to call functions here, refer to auth.proto and jail.proto

  // Discussion threads are organized as a tree with maximum three levels depth:
  // thread1
  // +- comment1
  // |  +- reply1
  // |  +- reply2
  // +- comment2
  //    +- reply3
  //    +- reply4
  // thread2
  // +- comment3
  // |  +- reply5
  // |  +- reply6
  // +- comment4
  //    +- reply7
  //    +- reply8

  // The same API is used regardless of level. All posts are using the same id namespace.

  // Get non-deleted posts belonging to a thread, sorted in reverse time order.
  // Pagination is supported by the posted_before_thread_id and number fields.
  rpc GetThread(GetThreadReq) returns (GetThreadRes);

  // Post a new comment on a thread. The post can not be changed or deleted after posting.
  // Throws INVALID_ARGUMENT if thread_id corresponds to a nesting level 3 reply, since no futher nesting is allowed.
  rpc PostComment(PostCommentReq) returns (PostCommentRes);
}

message GetThreadReq {
  int64 thread_id = 1;

  // Maximum number of comments to return. Defaults to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `GetThread` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, `thread_id` must match
  // the call that provided the page token.
  string page_token = 3;
}

message GetThreadRes {
  // sorted in inverse time order, latest comment first.
  repeated Comment comments = 1;

  // A token that can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message Comment {
  int64 thread_id = 1;
  string content = 2;  // markdown without images
  int64 author_user_id = 3;
  google.protobuf.Timestamp created_time = 4;

  // total number of replies to this comment
  uint32 num_replies = 5;
}

message PostCommentReq {
  int64 thread_id = 1;
  string content = 2;  // markdown without images
}

message PostCommentRes {
  // The id of the just posted comment
  int64 thread_id = 1;
}
